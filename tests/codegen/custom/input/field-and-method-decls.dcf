// 8) fieldDecl
//    type --> int, bool, int[], bool[]
//    scope --> global, method, IrCtrl, nested IrCtrl
// 10) Method calls
//    as a statement --> void, bool, int
//    as an expr --> bool, int
//    parameters count --> 0, +1

extern printf();

// allocated but not initialized in this scope
int varInt;
bool varBool;
int arrayInt[10];
bool arrayBool[10];

void methodVoid(int varInt, bool varBool) { // parameters count +1

    // allocated and initialized in this scope
    int arrayInt[10];
    bool arrayBool[10];

    // argument for varInt is 1
    // argument for varBool is true
    arrayInt[0] = 1;
    arrayBool[0] = true;

    if (true) {
    
        // allocated but not initialized in this scope
        int varInt;
        bool varBool;
        int arrayInt[10];
        bool arrayBool[10];

        if (false) { }
        else {
        
            // allocated and initialized in this scope
            int varInt;
            bool varBool;
            int arrayInt[10];
            bool arrayBool[10];

            varInt = 1;
            varBool = true;
            arrayInt[0] = 1;
            arrayBool[0] = true;

            // these variables should have a value in this scope
            printf("varInt = %d\n", varInt);
            printf("varBool = %d\n", varBool);
            printf("arrayInt[0] = %d\n", arrayInt[0]);
            printf("arrayBool[0] = %d\n", arrayBool[0]);
        }
        
        // these variables should not have a value in this scope
        printf("varInt = %d\n", varInt);
        printf("varBool = %d\n", varBool);
        printf("arrayInt[0] = %d\n", arrayInt[0]);
        printf("arrayBool[0] = %d\n", arrayBool[0]);
    }
    
    // these variables should have a value in this scope
    printf("varInt = %d\n", varInt);
    printf("varBool = %d\n", varBool);
    printf("arrayInt[0] = %d\n", arrayInt[0]);
    printf("arrayBool[0] = %d\n", arrayBool[0]);
}

int methodInt() {
    printf("methodInt() called");
    return 1;
}

bool methodBool() {
    printf("methodBool() called");
    return true;
}

void main() {
    // tests field decls in all but global scope
    int dummyVarInt;
    bool dummyVarBool;
    dummyVarInt = 1;
    dummyVarBool = true;
    methodVoid(dummyVarInt, dummyVarBool);
    
    // these varaibles should not have a value in this scope
    printf("varInt = %d\n", varInt);
    printf("varBool = %d\n", varBool);
    printf("arrayInt[0] = %d\n", arrayInt[0]);
    printf("arrayBool[0] = %d\n", arrayBool[0]);
    
    // tests for methods as statements
    methodInt();
    methodBool();
    
    // tests for methods as expressions
    printf("methodInt() = %d\n", methodInt());
    printf("methodBool() = %d\n", methodBool());
}